#! /usr/bin/python
import pygame, sys, os
from pygame.locals import *
from pygame import Color

from mpd import (MPDClient, CommandError, ConnectionError, ProtocolError)
from socket import error as SocketError

from controls.button import Button
from controls.list import ScrollList

from data.dataCollector import DataCollector

from settings import *



BUTTONS = [
    {"name":"pause", "active":"media/pause-active.png", "inactive":"media/pause.png", "position":(10,10)},
    {"name":"play", "active":"media/play-active.png", "inactive":"media/play.png", "position":(80,10)},
    {"name":"stop", "active":"media/stop-active.png", "inactive":"media/stop.png", "position":(150,10)},
    {"name":"rew", "active":"media/rew-active.png", "inactive":"media/rew.png", "position":(220,10)},
    {"name":"ff", "active":"media/ff-active.png", "inactive":"media/ff.png", "position":(290,10)},
]

LISTPOS = ((40,100),(560,340))

class Pympd():
    def __init__(self, mode):
        pygame.init()
        self.screen = pygame.display.set_mode(mode)
        
        """Init Joystick"""
        pygame.joystick.init()
        self.joystick = pygame.joystick.Joystick(0)
        self.joystick.init()
        
        """Buttons"""
        self.buttons = {}
        for button in BUTTONS:
            self.buttons[button["name"]] = Button(button["inactive"], button["active"] , button["position"])
            
        """List"""
        self.list = ScrollList(self.screen, pygame.Rect(LISTPOS))

        self.__mpdClient = DataCollector(HOST, PORT)
        
        self.__updatePlaylist()

    def __handle_events(self):
        for event in pygame.event.get():
            #Joypad Button down
            if event.type == 10 and event.button in KEYMAP:
                self.__mpdClient.updateStatus()

                if KEYMAP[event.button] == "A":
                    self.__mpdClient.play()    
                elif KEYMAP[event.button] == "B":
                    self.__mpdClient.stop()
                elif KEYMAP[event.button] == "left":
                    self.__mpdClient.previous()
                elif KEYMAP[event.button] == "right":
                    self.__mpdClient.next()
                elif KEYMAP[event.button] == "c-right":
                    self.__mpdClient.delete()
                    self.__updatePlaylist()
                else: #let the list handle the event
                    self.list.handle_event(event)
           
            self.__updateButtons()
           
            # Keyboard events
            if event.type == QUIT or event.type == KEYDOWN and event.key == K_ESCAPE:
                pygame.quit()
                sys.exit()
                #os.execlp("zsnes", "")

    '''
    Update playlist from server
    '''
    def __updatePlaylist(self):
        self.__mpdClient.updatePlaylist()
        self.list.set(self.__mpdClient.getPlaylist())

    '''
    Updates all buttons according to their state in the MPD daemon.
    '''
    def __updateButtons(self):
        self.__mpdClient.updateStatus()
        for button in self.buttons.values():
            button.active = False

        state = self.__mpdClient.status.state

        if state == 'play':
            self.buttons['play'].active = True
        if state == 'stop':
            self.buttons['stop'].active = True
        if state == 'pause':
            self.buttons['pause'].active = True

                
    def __draw(self):
        self.screen.fill(Color("black"))
        
        for button in self.buttons.values():
            button.draw(self.screen)
            
        self.list.draw()
            
        pygame.display.flip()
        
    def run(self):
        while 1:
            self.__draw()            
            self.__handle_events()
            pygame.time.wait(25)

if __name__ ==  "__main__":
    instance = Pympd(mode=(640,480))
    instance.run()
